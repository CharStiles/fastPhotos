#version 410 core

uniform float fGlobalTime; // in seconds
uniform float2 v2Resolution; // viewport resolution (in pixels)

uniform sampler1D texFFT; // towards 0.0 is bass / lower freq, towards 1.0 is higher / treble freq
uniform sampler1D texFFTSmoothed; // this one has longer falloff and less harsh transients
uniform sampler1D texFFTIntegrated; // this is continually increasing

layout(location = 0) out float4 out_color; // out_color must be written in order to see anything

float4 plas( float2 v, float time )
{
  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );
  return float4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );
}

float sp(float3 p , float l){
  return(length(p) - l + texture(texFFTSmoothed,mod(p.y,10)).r);
}


float scene(float3 p ){
  float c = 1;
  return sp(mod(p,c) - (c/2), .1);
}
float3 norm(float3 p){
  float2 v = float2(0,.01);
  float n1 = scene(p + v.xxy) - scene(p - v.xxy);
  float n2 = scene(p + v.xyx) - scene(p - v.xyx);
  float n3 = scene(p + v.yxx) - scene(p - v.yxx);
  return 1- normalize(float3(n1,n2,n3));

}


float4 material(float3 p){
  return float4(1) * float4(norm(p),1);
}

float4 trace(float3 p, float3 dir){
  float d = 0;
  
  for (int i =0; i < 64; i ++){
    d = scene(p);
    p += d * dir;
    if(d<0.001){
      return material(p);
    }
  }
  return float4(0,0,0,1);
  
}

void main(void)
{
  float2 uv = float2(gl_FragCoord.x / v2Resolution.x, gl_FragCoord.y / v2Resolution.y);
  uv -= 0.5;
  uv /= float2(v2Resolution.y / v2Resolution.x, 1);

  float2 m;
  m.x = atan(uv.x / uv.y) / 3.14;
  m.y = 1 / length(uv) * .2;
  float d = m.y;

  float f = texture( texFFTSmoothed, d ).r * 100;

  float f2 = texture( texFFTIntegrated, d ).r * 1;
  m.x += sin( fGlobalTime ) * 0.1;
  m.y += fGlobalTime * 0.25;

  float FOV = 1;
  float3 ro = float3(0,0,fGlobalTime);
  float3 lookat = float3(0,f2,fGlobalTime + 1);
  float3 forward = normalize(lookat-ro);
  float3 right = normalize(float3(forward.z,0,forward.x));
  float3 up = normalize(cross(forward,right));
float3 rd = normalize(forward+FOV * uv.x * right +uv.y*FOV * up);

  float4 col = trace(ro,rd);

  float4 t = col - float4(m,0,0);
  t = clamp( t, 0.0, 1.0 );
  out_color = f + t;
}